<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, viewport-fit=cover" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-fullscreen">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="theme-color" content="#1a1a2e">
    <title>Cyber Runner</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        touch-action: none;
        user-select: none;
        -webkit-user-select: none;
        -webkit-touch-callout: none;
      }
      
      html, body {
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        font-family: 'Arial', sans-serif;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        position: fixed;
        top: 0;
        left: 0;
      }
      
      /* Force landscape orientation */
      @media (orientation: portrait) {
        body::before {
          content: "Please rotate your device to landscape mode";
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          color: white;
          font-size: 6vw;
          text-align: center;
          z-index: 10000;
          background: rgba(0,0,0,0.9);
          padding: 5vw;
          border-radius: 2vw;
        }
        
        #gameCanvas, #mainMenu {
          display: none !important;
        }
      }
      
      #gameCanvas {
        display: block;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: transparent;
        z-index: 1;
      }
      
      #mainMenu {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 100;
        color: white;
      }
      
      .menu-title {
        font-size: 8vh;
        font-weight: bold;
        margin-bottom: 5vh;
        text-shadow: 0 0 20px #00ffff;
        background: linear-gradient(45deg, #00ffff, #ff00ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: glow 2s ease-in-out infinite alternate;
      }
      
      @keyframes glow {
        from { text-shadow: 0 0 20px #00ffff; }
        to { text-shadow: 0 0 30px #ff00ff, 0 0 40px #00ffff; }
      }
      
      .menu-button {
        background: linear-gradient(135deg, #00ffff 0%, #ff00ff 100%);
        border: none;
        color: white;
        font-size: 4vh;
        font-weight: bold;
        padding: 2vh 6vh;
        margin: 1vh;
        border-radius: 2vh;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0,255,255,0.3);
        min-width: 30vh;
      }
      
      .menu-button:hover, .menu-button:active {
        transform: scale(1.05);
        box-shadow: 0 6px 20px rgba(255,0,255,0.5);
      }
      
      #ui {
        display: none;
      }
      
      .game-message {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: #fff;
        font-size: 5vh;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(135deg, rgba(0,0,0,0.95), rgba(26,26,46,0.95));
        padding: 4vh 8vh;
        border-radius: 2vh;
        z-index: 1000;
        box-shadow: 0 0 30px rgba(0,255,255,0.5);
        border: 2px solid #00ffff;
        animation: fadeIn 0.5s ease-in;
      }
      
      @keyframes fadeIn {
        from { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
        to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
      }
      
      .pause-menu {
        display: none;
      }
      
      .pause-button {
        display: none;
      }
    </style>
  </head>
  <body>

    
    <div id="levelSelectMenu" style="display: none;">
      <h1 class="menu-title">SELECT LEVEL</h1>
      <div class="level-grid">
        <button class="level-button" onclick="startLevel(1)">
          <div class="level-number">1</div>
          <div class="level-name">Tutorial</div>
        </button>
        <button class="level-button" onclick="startLevel(2)">
          <div class="level-number">2</div>
          <div class="level-name">Forest</div>
        </button>
        <button class="level-button" onclick="startLevel(3)">
          <div class="level-number">3</div>
          <div class="level-name">Mountain</div>
        </button>
        <button class="level-button" onclick="startLevel(4)">
          <div class="level-number">4</div>
          <div class="level-name">Desert</div>
        </button>
        <button class="level-button" onclick="startLevel(5)">
          <div class="level-number">5</div>
          <div class="level-name">Ice Cave</div>
        </button>
        <button class="level-button" onclick="startLevel(6)">
          <div class="level-number">6</div>
          <div class="level-name">Robot Factory</div>
        </button>
      </div>
      <button class="menu-button" onclick="backToMainMenu()">BACK</button>
    </div>
    
    
    <canvas id="gameCanvas" width="1920" height="1080" style="display: none;" tabindex="0" onclick="this.focus()"></canvas>
    
    <script>
      let game = null;
      
      async function startGame() {
        document.getElementById('mainMenu').style.display = 'none';
        document.getElementById('levelSelectMenu').style.display = 'none';
        document.getElementById('gameCanvas').style.display = 'block';

        // Game is already initialized by main.ts, load the Game scene
        if (window.gameEngine) {
          await window.gameEngine.getSceneManager().loadScene('Game');
          window.gameEngine.start();
          // Focus the canvas for keyboard input
          document.getElementById('gameCanvas').focus();
        }
      }
      
     async function startLevel(levelNumber) {
       document.getElementById('mainMenu').style.display = 'none';
       document.getElementById('levelSelectMenu').style.display = 'none';
       document.getElementById('gameCanvas').style.display = 'block';

       // Game is already initialized by main.ts, load the Game scene
       if (window.gameEngine) {
         await window.gameEngine.getSceneManager().loadScene('Game');
         window.gameEngine.start();
         // Focus the canvas for keyboard input
         document.getElementById('gameCanvas').focus();
       }
     }
     
     function showLevelSelect() {
       document.getElementById('mainMenu').style.display = 'none';
       document.getElementById('levelSelectMenu').style.display = 'flex';
     }
     
     function backToMainMenu() {
       document.getElementById('levelSelectMenu').style.display = 'none';
       document.getElementById('mainMenu').style.display = 'flex';
       document.getElementById('levelSelectMenu').style.display = 'none';
      }
      
      function showSettings() {
        alert('Settings coming soon!');
      }
      
      function showCredits() {
        alert('Made with ❤️ for mobile gaming');
      }
      
      async function goToMenu() {
        if (window.gameEngine) {
          await window.gameEngine.getSceneManager().loadScene('MainMenu');
        }
      }

      window.goToMenu = goToMenu;
      
      // Prevent context menu and zoom
      document.addEventListener('contextmenu', e => e.preventDefault());
      document.addEventListener('touchstart', e => {
        if (e.touches.length > 1) e.preventDefault();
      }, { passive: false });
      
      // Lock orientation to landscape
      if (screen.orientation && screen.orientation.lock) {
        screen.orientation.lock('landscape').catch(() => {});
      }
    </script>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>